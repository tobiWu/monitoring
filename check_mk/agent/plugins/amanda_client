#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# Monitoring of amanda backups:
# for every disk in amanda config
# every backup from amreport is recorded with the actual time
# the result is saved in a temporary file and accounted at next run
#
# the result can be displayed as checkmk_agent_output:
# it can be assigned to the clients as piggyback data
#
# maintainer: <t.wurzbacher@mail.de
#
# checkmk output format:
# <<<<amanda_client_hostname>>>>
# <<<amanda_client:sep(124)>>>
# backupserver|AmandaSet03|/directory|timestamp|amanda_output
# 

import os, re, sys, time
from datetime import datetime

amreport_cmd = '/usr/sbin/amreport'

# exit if amanda is not installed
if not os.path.exists(amreport_cmd):
    sys.exit(0)


def getAmSets():
	# get all active amanda sets called by cron
	cron_command = 'sudo su - backup -s /bin/bash -c "crontab -l | grep amdump"'
	amanda_sets = []
	for line in os.popen(cron_command).readlines():
		parts = line.split()
		if not line.startswith('#') and len(parts) == 7:
			amanda_sets.append(parts[-1])
	# exit if no active amdumps via cron
	if len(amanda_sets) == 0:
		sys.exit(0)
	return amanda_sets


def mergelists(amSet, disklist, dumpedlist):
	# get timestamp of actual amreport
	timestamp = getTimestamp(amSet)
	# for directories of disklist
	for disk in disklist:
		# if disk is in last dumpedlist, write information to list
		for dumpdisk in dumpedlist:
			if set(disk).issubset(dumpdisk):
				# append new timestamp into diskinfo
				dumpdisk.insert(2,timestamp)
				# change olddisk with new disk
				disklist.remove(disk)
				disklist.insert(0,dumpdisk)
	return disklist


def compareOldList(amSet,disklist):
	old_diskfile = "/var/tmp/%s_disklist" % amSet
	old_disklist = []
	try:
		# read in old disklist from tmp file
		with open(old_diskfile, "r") as f:
		        for line in f:
				disk = []
                                parts = line.split()
                                disk.append(parts[0])
				disk.append(parts[1])
                                if len(parts) > 2:
        				disk.append(parts[2])
	        			disk.append(" ".join(parts[3:]))
				old_disklist.append(disk)
	except:
		# go one without old list
                # print "Could not read in old disk-file"
		pass

	# if theres no oldlist, just give back disklist
	if len(old_disklist) > 0:
		for disk in disklist:
			# if no timestamp in new list, get the old one
			if len(disk) == 2:
				try:
					for oldDisk in old_disklist:
						# just old items with timestamp are relevant
						if len(oldDisk) == 4:
							# if disk and oldDisk match change them
							if disk == oldDisk[:2] and oldDisk[2] != "":
								#print "Changed Element %s with %s" % (disk, oldDisk)
								disklist.remove(disk)
								disklist.append(oldDisk)
				except:
					print "Could not find old entry for %s" % disk
	return disklist	


def getDisklist(amSet):
	# read in actual disklist from config
	diskfile = "/etc/amanda/%s/disklist" % amSet
	disklist = []
	try:
		with open(diskfile, "r") as f:
			for line in f:
				if line[0] != "#" and line[0] != '\n':
					disk = []
					disk.extend([line.split(" ")[0], line.split(" ")[1]])
                                        disklist.append(disk)
	except:
		print "Could not open %s" % diskfile
		sys.exit(0)	
	return disklist


def dumpedDisks(amSet):
	# get dumped directories from amreport
	amreport_command = 'sudo su - backup -s /bin/bash -c \"/usr/sbin/amreport ' + amSet + '\"'
	amreport = []
	dumped = False
	for line in os.popen(amreport_command).readlines():
		parts = line.split()
	        if line.startswith('DUMP SUMMARY:'):
        		dumped = True
            		continue
        	if line.startswith('FAILURE DUMP SUMMARY:'):
            		dumped = False
            		continue
	        # we are in DUMP SUMMARY section and see a hostname as first field
	        if dumped and len(parts) > 2 and re.match('^[a-z0-9\.]+$', parts[0]):
			disk = []
			# for each disk add host, directory and status
			disk.extend([parts[0],parts[1]])
			disk.append(" ".join(parts[2:]))
			try:
				# compare the last disk of the list with the new disk
				lastdisk = list.pop(amreport)
				# use the newer disk, it's the higher backup level
				if disk[:2] == lastdisk[:2]:
                                        amreport.append(disk)
				else:
                                        amreport.append(lastdisk)
                                        amreport.append(disk)
			except:
                                amreport.append(disk)
	return amreport


def getTimestamp(amSet):
	# get last Timestamp from amstatus
        amstatus_cmd = 'sudo su - backup -s /bin/bash -c \"/usr/sbin/amstatus ' + amSet + '\"'
	for line in os.popen(amstatus_cmd):
		if line.startswith("From"):
			date = line.replace("From ","").replace("\n","")
			# read in date from strime to date object
			dt = datetime.strptime(date, '%a %b %d %H:%M:%S %Z %Y')
			# convert date object to timestamp
			return int(time.mktime(dt.timetuple()))


def writeFile(disklist, amSet):
	# write disklist to temp file
	diskfile = "/var/tmp/%s_disklist" % amSet
	try: 	
		with open(diskfile,"w+") as f:
			for line in disklist:
       				f.writelines("%s\n" % (" ".join(str(item) for item in line)))
	except:	
		print "Temp File %s could not be written" % diskfile


def printCheckmk(amSet,disklist):
        import socket
        host = socket.gethostname()
	# print data for check_mk agent as piggyback
        for disk in disklist:
		print "<<<<%s>>>>" % disk[0].replace("localhost",host)
		print "<<<amanda_client:sep(124)>>>"
		print "%s|%s|%s" % (host, amSet, "|".join(str(item) for item in disk[1:]))
		print "<<<<>>>>"
	

# for each amandaset
for amSet in getAmSets():
	# get disklist from config
	disklist = getDisklist(amSet)
	# get last backuped from amreport
	dumpedlist = dumpedDisks(amSet)
	# merge dumpedlist with timestamps into disklist
	mergedlist = mergelists(amSet, disklist, dumpedlist)
	# add missing timestamps from the old list
	newlist = compareOldList(amSet, mergedlist)
	# print for check_mk
	printCheckmk(amSet,newlist)
	# write the new list to file
	writeFile(newlist, amSet)
