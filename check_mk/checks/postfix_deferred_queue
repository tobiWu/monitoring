#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Monitoring of postfix defered queues
# analyzing the queue in the aspects of the amount of receiver address,
# receiver provider and sender
#
# written by <t.wurzbacher@mail.de>
# 

# Example Agent Output:
#<<<defered_mail>>>
#[addresses]
#     34 xy@vr-web.de
#     24 abc@gmail.de
#      7 test@t-online.de
#      5 maik@icloud.de
#      4 elsteruser@hidebox.org
#[provider]
#     34 @vr-web.de
#     24 @gmail.de
#      7 @t-online.de
#      5 @icloud.de
#      4 @hidebox.org
#[sender]
#    266 one@test.de
#     30 two@test.de
#     20 three@test.de
#

factory_settings["defered_mail_default_levels"] = {
    "mail_address"  : (30,50),
    "mail_provider" : (300,700),
    "mail_sender"   : (500,1000)
}

def parse_defered_mail(info):
    parsed = {}
    for line in info:
        # nested dictionary for each section (status, resource, time)
        if line[0].startswith("[") and line[0].endswith("]"):
            typ = str(line[0])
            parsed[typ] = {}
        # fill section dictionarys with data
        else:
            key = str(line[0])
            value = str(line[1])
            parsed[typ][key] = value
    return parsed

check_info['deffered_mail'] = {
    "parse_function"          : parse_defered_mail,
    "default_levels_variable" : "defered_mail_default_levels",
}

def inventory_defered_mail_address(parsed):
    for line in parsed:
        if "address" in line:
            return [ (None, defered_mail_default_levels) ]

def check_defered_mail_address(_no_item, params, parsed):

    # iterate over sections
    for sectionname, section in parsed.iteritems():
        infotext = ""
        status = 0
        warn, crit = params['mail_address']
        # section address
        if "address" in sectionname:
            for count, addr in section.iteritems():
                infotext += "%s %s, " % (count, addr)
                if int(count) > crit:
                        status = 2
                elif int(count) > warn:
                        status = 1
            yield status, infotext,
check_info['deffered_mail.address'] = {
    "inventory_function"      : inventory_defered_mail_address,
    "check_function"          : check_defered_mail_address,
    "service_description"     : "Postfix defered by address",
    "group"                   : "defered_mail",
    "default_levels_variable" : "defered_mail_default_levels",
}


def inventory_defered_mail_provider(parsed):
    for line in parsed:
        if "provider" in line:
            return [ (None, defered_mail_default_levels) ]

def check_defered_mail_provider(_no_item, params, parsed):

    # iterate over sections
    for sectionname, section in parsed.iteritems():
        infotext = ""
        status = 0
        warn, crit = params['mail_provider']
        # section provider
        if "provider" in sectionname:
            for count, addr in section.iteritems():
                infotext += "%s %s, " % (count, addr)
                if int(count) > crit:
                        status = 2
                elif int(count) > warn:
                        status = 1
            yield status, infotext,

check_info['deffered_mail.provider'] = {
    "inventory_function"      : inventory_defered_mail_provider,
    "check_function"          : check_defered_mail_provider,
    "service_description"     : "Postfix defered by provider",
    "group"                   : "defered_mail",
    "default_levels_variable" : "defered_mail_default_levels",
}

def inventory_defered_mail_sender(parsed):
    for line in parsed:
        if "sender" in line:
            return [ (None, defered_mail_default_levels) ]

def check_defered_mail_sender(_no_item, params, parsed):

    # iterate over sections
    for sectionname, section in parsed.iteritems():
        infotext = ""
        status = 0
        warn, crit = params['mail_sender']
        # section sender
        if "sender" in sectionname:
            for count, addr in section.iteritems():
                infotext += "%s %s, " % (count, addr)
                if int(count) > crit:
                        status = 2
                elif int(count) > warn:
                        status = 1
            yield status, infotext,

check_info['deffered_mail.sender'] = {
    "inventory_function"      : inventory_defered_mail_sender,
    "check_function"          : check_defered_mail_sender,
    "service_description"     : "Postfix defered by sender",
    "group"                   : "defered_mail",
    "default_levels_variable" : "defered_mail_default_levels",
}
