#~/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# maintainer: <t.wurzbacher@mail.de>


### DESCRIPTION ###
# monitoring plugin for amanda server and client
# reads in agent output of amanda_client and amanda_server plugin 
# for each directory in amanda backup config one checkmk service is created:
#   the state depends on the amanda report output and the age of the last backup


### EXAMPLE agent output ###
# <<<amanda_server>>>
# Statistics Disk 6452
# Statistics Dumptime Dump Time (hrs:min)         0:00       0:00       0:00
# Statistics Tapesize Tape Size (meg)          18811.2    18811.2        0.0
# Statistics Tapes DailySet_backup03-Z05670 DailySet_backup03-Z05676
# <<<<server02.example.de>>>>
# <<<amanda_client:sep(124)>>>
# backup03|DailySet_backup03|/opt|1558344060|1 11773 2525 21.4 FLUSH 0:31 83402.3
# <<<<>>>>
# <<<<ldapserver01.example.de>>>>
# <<<amanda_client:sep(124)>>>
# backup03|DailySet_backup03|/etc|1558360801|1 0 0 8.1 0:00 239.5 0:00 210.0
# <<<<>>>>


def inventory_amanda_server(info):
    for line in info:
        if line[0].startswith("Statistics"):
            yield line[1], None

def check_amanda_server(item, _no_params, info):
    for line in info:
        if item == line[1]:
            infotext = ""
            state = 0
            perfdata = []
            tapes = []

            if line[1] == "Disk":
                disk = float(line[2])*1024*1024
                perfdata = [ ( "fs_size",disk ) ]
                if float(line[2]) > 0:
                    state = 1
                    infotext = "There are %s MB of dumps left in the holding disk. Run amflush to flush them to tape." % (line[2])
                else:
                    infotext = "No dumps left on holding disk."

            if line[1] == "Tapesize":
                size = float(line[5])*1024*1024
                infotext = "Total Size of Tapes is %s MB." % (line[5])
                perfdata = [ ( "fs_size",size ) ]

            if line[1] == "Dumptime":
                time = int(line[5].split(":")[0])*60*60 + int(line[5].split(":")[1])*60
                infotext = "Total Dump Time is %s (hh:min)." % (line[5])
                perfdata = [ ( "runtime",time ) ]

            if line[1] == "Tapes":
                tapes = line[2:]
                counter = len(tapes)
                infotext = "%d Tapes in use: %s" % (counter, " ".join(tapes))
                perfdata = [ ( "Tapes",counter ) ]

            return state, infotext, perfdata

check_info['amanda_server'] = { 
    "inventory_function"      : inventory_amanda_server,
    "check_function"          : check_amanda_server,
    "service_description"     : "Amanda %s",
    "has_perfdata"            : True,
}

def inventory_amanda_client(info):
    for line in info:
        yield line[2], None

def check_amanda_client(item, _no_params, info):
    import time, datetime
    now = int(time.time())
    warn = 129600
    for line in info:
        if item == line[2]:
            bck_host = line[0]
            am_set = line[1]

            if len(line) < 5:
                # no data for disk in output 
                state = 1
                infotext = "No Backup on %s monitored yet." % (bck_host)

                yield state, infotext

            else:
                # what's the output of amreport?
                timestamp = int(line[3])
                delta = now - timestamp
                message = line[4]
                parts = message.split()
                if re.search("NO FILE TO FLUSH", message):
                    state = 0
                    infotext = "%s on %s" % (message, bck_host )
                elif re.search("RESULTS MISSING", message):
                    state = 0
                    infotext = "%s, Backup in Progress %s" % (message, bck_host )
                elif re.search("FAILED", message):
                    state = 1
                    infotext = "Backup failed on %s" % (bck_host )
                elif re.search("NOT FLUSHED", message):
                    state = 1
                    infotext = "Flush failed on %s" % (bck_host )
                elif re.search("MISSING", message):
                    if delta > 600:
                        state = 1
                        infotext = "Backup missing %s" % (bck_host )
                    else:
                        state = 0
                        infotext = "Backup running %s" % (bck_host )
                elif re.search("FLUSH", message):
                    state = 0
                    infotext = "Backup flushed: Level %s - OrigSize %sMB - Dump Duration %s(mm:ss) on %s" % (parts[0], parts[1], parts[5], bck_host )
                else:
                    state = 0
                    infotext = "Level %s - OrigSize %sMB - Dump Duration %s(mm:ss) on %s" % (parts[0], parts[1], parts[4], bck_host )
                yield state, infotext

                # how old is the last backup?
                if delta > warn:
                    state = 1
                else:
                    state = 0
                infotext = "Last Backup %s ago on %s" % (get_age_human_readable(delta), bck_host)
                perfdata = [ ("backup_age", delta, warn, ) ]

                yield state, infotext, perfdata

check_info['amanda_client'] = {
    "inventory_function"      : inventory_amanda_client,
    "check_function"          : check_amanda_client,
    "service_description"     : "Backup of %s",
    "has_perfdata"            : True,
}
